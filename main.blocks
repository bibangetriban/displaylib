<xml xmlns="http://www.w3.org/1999/xhtml">
  <variables>
    <variable id="r4*~sq4(.d+VmN2S2{?*" type="">dd</variable>
    <variable id="hW]tG.{ko8$9`bJ1d$~_" type="">duz</variable>
    <variable id=",|3#3XZaj,cMzss/il,x" type="">n</variable>
  </variables>
  <block type="pxt-on-start" y="20" x="20">
    <statement name="HANDLER">
      <block type="typescript_statement" editable="false">
        <mutation declaredvars="duz" numlines="1" line0="let duz = 0"></mutation>
        <field name="LINE0">let duz = 0</field>
        <next>
          <block type="typescript_statement" editable="false">
            <mutation numlines="7" line0="enum Boje {" line1="    //% block=&quot;C&quot;" line2="    &quot;C&quot;," line3="    //% block=&quot;B&quot;" line4="    &quot;B&quot;" line5="" line6="}"></mutation>
            <field name="LINE0">enum Boje {</field>
            <field name="LINE1">    //% block="C"</field>
            <field name="LINE2">    "C",</field>
            <field name="LINE3">    //% block="B"</field>
            <field name="LINE4">    "B"</field>
            <field name="LINE5"></field>
            <field name="LINE6">}</field>
            <next>
              <block type="typescript_statement" editable="false">
                <mutation numlines="76" line0="namespace bitmap8x8create {" line1="" line2="    //% block" line3="    //% gesture.fieldEditor=&quot;gridpicker&quot;" line4="    //% gesture.fieldOptions.width=20" line5="    //% gesture2.fieldEditor=&quot;gridpicker&quot;" line6="    //% gesture2.fieldOptions.width=20" line38="" line39="    //% block=&quot;$on $on2 &quot;" line40="    //% on.shadow=&quot;toggleOnOff&quot;" line37="" line36="    //% gesture8.fieldOptions.columns=1" line7="    //% gesture2.fieldOptions.columns=1" line8="" line9="    export function onGesture(gesture: Boje, gesture2: Boje ) {" line10="" line11="    }" line12="" line13="" line14="" line15="    /**" line22="    //% gesture4.fieldEditor=&quot;gridpicker&quot;" line21="    //% gesture3.fieldOptions.columns=1" line20="    //% gesture3.fieldOptions.width=20" line19="          //% gesture3.fieldEditor=&quot;gridpicker&quot;" line18="     * , gesture3: Boje, gesture4: Boje, gesture5: Boje, gesture6: Boje, gesture7: Boje, gesture8: Boje" line17="     * " line16="     * Render a boolean as a on/off toggle" line24="    //% gesture4.fieldOptions.columns=1" line23="    //% gesture4.fieldOptions.width=20" line28="    //% gesture6.fieldEditor=&quot;gridpicker&quot;" line27="    //% gesture5.fieldOptions.columns=1" line26="    //% gesture5.fieldOptions.width=20" line25="     //% gesture5.fieldEditor=&quot;gridpicker&quot;" line29="    //% gesture6.fieldOptions.width=20" line35="    //% gesture8.fieldOptions.width=20" line34="    //% gesture8.fieldEditor=&quot;gridpicker&quot;" line33="    //% gesture7.fieldOptions.columns=1" line32="    //% gesture7.fieldOptions.width=20" line31="     //% gesture7.fieldEditor=&quot;gridpicker&quot;" line30="    //% gesture6.fieldOptions.columns=1" line41="    //% on3.shadow=&quot;toggleOnOff&quot;" line42="    //% on22.shadow=&quot;toggleOnOff&quot;" line43="    //% on33.shadow=&quot;toggleOnOff&quot;" line44="    //% on55.shadow=&quot;toggleOnOff&quot;" line45="    //% on66.shadow=&quot;toggleOnOff&quot;" line56=". . . . ." line57="`)" line58="*/" line59="" line60="" line61="" line62="" line63="" line64="    /*" line65="        //% matrica = [[odabir, 0], [odabir, 0], [odabir, 0], [odabir, 0], [odabir, 0], [odabir, 0], [odabir, 0], [odabir, 0]," line66="                   [odabir, 1], [odabir, 1], [odabir, 1], [odabir, 1], [odabir, 1], [odabir, 1], [odabir, 1], [odabir, 1]," line67="                   [odabir, 2], [odabir, 2], [odabir, 2], [odabir, 2], [odabir, 2], [odabir, 2], [odabir, 2], [odabir, 2]," line68="                   [odabir, 3], [odabir, 3], [odabir, 3], [odabir, 3], [odabir, 3], [odabir, 3], [odabir, 3], [odabir, 3]," line69="                   [odabir, 4], [odabir, 4], [odabir, 4], [odabir, 4], [odabir, 4], [odabir, 4], [odabir, 4], [odabir, 4]," line70="                   [odabir, 5], [odabir, 5], [odabir, 5], [odabir, 5], [odabir, 5], [odabir, 5], [odabir, 5], [odabir, 5]," line71="                   [odabir, 6], [odabir, 6], [odabir, 6], [odabir, 6], [odabir, 6], [odabir, 6], [odabir, 6], [odabir, 6]," line46="    //% on44.shadow=&quot;toggleOnOff&quot;" line47="    export function odabir(on: boolean, on2: boolean, on3: boolean, on22: boolean, on33: boolean, on55: boolean, on66: boolean, on44: boolean): boolean {" line48="        return on;" line49="    }" line50="" line51="        basic.showLeds(`" line52=". . . . ." line53=". . . . ." line54=". . # . ." line55=". . . . ." line73="        ]" line74="      */" line75="}" line72="                   [odabir, 7], [odabir, 7], [odabir, 7], [odabir, 7], [odabir, 7], [odabir, 7], [odabir, 7], [odabir, 7]"></mutation>
                <field name="LINE0">namespace bitmap8x8create {</field>
                <field name="LINE1"></field>
                <field name="LINE2">    //% block</field>
                <field name="LINE3">    //% gesture.fieldEditor="gridpicker"</field>
                <field name="LINE4">    //% gesture.fieldOptions.width=20</field>
                <field name="LINE5">    //% gesture2.fieldEditor="gridpicker"</field>
                <field name="LINE6">    //% gesture2.fieldOptions.width=20</field>
                <field name="LINE7">    //% gesture2.fieldOptions.columns=1</field>
                <field name="LINE8"></field>
                <field name="LINE9">    export function onGesture(gesture: Boje, gesture2: Boje ) {</field>
                <field name="LINE10"></field>
                <field name="LINE11">    }</field>
                <field name="LINE12"></field>
                <field name="LINE13"></field>
                <field name="LINE14"></field>
                <field name="LINE15">    /**</field>
                <field name="LINE16">     * Render a boolean as a on/off toggle</field>
                <field name="LINE17">     * </field>
                <field name="LINE18">     * , gesture3: Boje, gesture4: Boje, gesture5: Boje, gesture6: Boje, gesture7: Boje, gesture8: Boje</field>
                <field name="LINE19">          //% gesture3.fieldEditor="gridpicker"</field>
                <field name="LINE20">    //% gesture3.fieldOptions.width=20</field>
                <field name="LINE21">    //% gesture3.fieldOptions.columns=1</field>
                <field name="LINE22">    //% gesture4.fieldEditor="gridpicker"</field>
                <field name="LINE23">    //% gesture4.fieldOptions.width=20</field>
                <field name="LINE24">    //% gesture4.fieldOptions.columns=1</field>
                <field name="LINE25">     //% gesture5.fieldEditor="gridpicker"</field>
                <field name="LINE26">    //% gesture5.fieldOptions.width=20</field>
                <field name="LINE27">    //% gesture5.fieldOptions.columns=1</field>
                <field name="LINE28">    //% gesture6.fieldEditor="gridpicker"</field>
                <field name="LINE29">    //% gesture6.fieldOptions.width=20</field>
                <field name="LINE30">    //% gesture6.fieldOptions.columns=1</field>
                <field name="LINE31">     //% gesture7.fieldEditor="gridpicker"</field>
                <field name="LINE32">    //% gesture7.fieldOptions.width=20</field>
                <field name="LINE33">    //% gesture7.fieldOptions.columns=1</field>
                <field name="LINE34">    //% gesture8.fieldEditor="gridpicker"</field>
                <field name="LINE35">    //% gesture8.fieldOptions.width=20</field>
                <field name="LINE36">    //% gesture8.fieldOptions.columns=1</field>
                <field name="LINE37"></field>
                <field name="LINE38"></field>
                <field name="LINE39">    //% block="$on $on2 "</field>
                <field name="LINE40">    //% on.shadow="toggleOnOff"</field>
                <field name="LINE41">    //% on3.shadow="toggleOnOff"</field>
                <field name="LINE42">    //% on22.shadow="toggleOnOff"</field>
                <field name="LINE43">    //% on33.shadow="toggleOnOff"</field>
                <field name="LINE44">    //% on55.shadow="toggleOnOff"</field>
                <field name="LINE45">    //% on66.shadow="toggleOnOff"</field>
                <field name="LINE46">    //% on44.shadow="toggleOnOff"</field>
                <field name="LINE47">    export function odabir(on: boolean, on2: boolean, on3: boolean, on22: boolean, on33: boolean, on55: boolean, on66: boolean, on44: boolean): boolean {</field>
                <field name="LINE48">        return on;</field>
                <field name="LINE49">    }</field>
                <field name="LINE50"></field>
                <field name="LINE51">        basic.showLeds(`</field>
                <field name="LINE52">. . . . .</field>
                <field name="LINE53">. . . . .</field>
                <field name="LINE54">. . # . .</field>
                <field name="LINE55">. . . . .</field>
                <field name="LINE56">. . . . .</field>
                <field name="LINE57">`)</field>
                <field name="LINE58">*/</field>
                <field name="LINE59"></field>
                <field name="LINE60"></field>
                <field name="LINE61"></field>
                <field name="LINE62"></field>
                <field name="LINE63"></field>
                <field name="LINE64">    /*</field>
                <field name="LINE65">        //% matrica = [[odabir, 0], [odabir, 0], [odabir, 0], [odabir, 0], [odabir, 0], [odabir, 0], [odabir, 0], [odabir, 0],</field>
                <field name="LINE66">                   [odabir, 1], [odabir, 1], [odabir, 1], [odabir, 1], [odabir, 1], [odabir, 1], [odabir, 1], [odabir, 1],</field>
                <field name="LINE67">                   [odabir, 2], [odabir, 2], [odabir, 2], [odabir, 2], [odabir, 2], [odabir, 2], [odabir, 2], [odabir, 2],</field>
                <field name="LINE68">                   [odabir, 3], [odabir, 3], [odabir, 3], [odabir, 3], [odabir, 3], [odabir, 3], [odabir, 3], [odabir, 3],</field>
                <field name="LINE69">                   [odabir, 4], [odabir, 4], [odabir, 4], [odabir, 4], [odabir, 4], [odabir, 4], [odabir, 4], [odabir, 4],</field>
                <field name="LINE70">                   [odabir, 5], [odabir, 5], [odabir, 5], [odabir, 5], [odabir, 5], [odabir, 5], [odabir, 5], [odabir, 5],</field>
                <field name="LINE71">                   [odabir, 6], [odabir, 6], [odabir, 6], [odabir, 6], [odabir, 6], [odabir, 6], [odabir, 6], [odabir, 6],</field>
                <field name="LINE72">                   [odabir, 7], [odabir, 7], [odabir, 7], [odabir, 7], [odabir, 7], [odabir, 7], [odabir, 7], [odabir, 7]</field>
                <field name="LINE73">        ]</field>
                <field name="LINE74">      */</field>
                <field name="LINE75">}</field>
                <next>
                  <block type="typescript_statement" editable="false">
                    <mutation numlines="267" line0="namespace Display {" line1="" line2="" line3="    //% weight=100" line4="    //% blockId=bit16" line5="    //% block=&quot;iscrtaj bitmapu 16x16 broja %n na poziciji  x %x i  y %y| i boje(c/b) %boja&quot;" line6="    //% blockExternalInputs=true" line38="" line39="    //% weight=97" line40="    //% blockId=scup" line37="    }" line36="        ispis(&quot;SPR;&quot; + n.toString() + &quot;;&quot; + x.toString() + &quot;;&quot; + y.toString() + &quot;;&quot; + boja);" line7="    export function bit16(n: number, x: number, y: number, boja: string): void {" line8="        switch (boja) {" line9="            case (&quot;c&quot;): boja = &quot;C&quot;;" line10="            case (&quot;b&quot;): boja = &quot;B&quot;;" line11="            default: boja = &quot;C&quot;;" line12="        }" line13="        ispis(&quot;B16;&quot; + n.toString() + &quot;;&quot; + x.toString() + &quot;;&quot; + y.toString() + &quot;;&quot; + boja);" line14="    }" line15="" line22="            ispis(&quot;BIT;&quot; + n.toString() + &quot;;&quot; + boja1.toString() + &quot;;&quot; + boja2.toString() + &quot;;&quot; + boja3.toString() + &quot;;&quot; + boja4.toString() + &quot;;&quot; + boja5.toString() + &quot;;&quot; + boja6.toString() + &quot;;&quot; + boja7.toString() + &quot;;&quot; + boja8.toString());" line21="        export function bit8x8(n: number, boja1: number, boja2: number, boja3: number, boja4: number, boja5: number, boja6: number, boja7: number, boja8: number): void {" line20="        //% blockExternalInputs=true" line19="        //% block=&quot;definiraj bitmapu 8x8 brojem(0-9) %n i sedam boja(0-255) %boja1, %boja2, %boja3 %boja4 %boja5 %boja6 %boja7 %boja8&quot;" line18="        //% blockId=bit8x8" line17="        //% weight=99" line16="    " line24="        }" line23="         /*   let zbroj = [128,64,32,16,8,4,2,1] */" line28="    //% block=&quot;ispisi definiranu bitmapu 8x8 (0-9) %n na poziciji  x %x i  y %y| i boje(c/b) %boja&quot;" line27="    //% blockId=isbit8x8" line26="    //% weight=98" line25="" line29="    //% blockExternalInputs=true" line35="        }" line34="            default: boja = &quot;C&quot;;" line33="            case (&quot;b&quot;): boja = &quot;B&quot;;" line32="            case (&quot;c&quot;): boja = &quot;C&quot;;" line31="        switch (boja) {" line30="    export function isbit8x8(n: number, x: number, y: number, boja: string): void {" line41="    //% block=&quot;scroll bitmap UP za %n pixela&quot;" line42="    //% blockExternalInputs=true" line43="    export function scup(n: number): void {" line44="        ispis(&quot;SBU;&quot; + n.toString());" line45="    }" line56="    //% blockId=sctxtup" line57="    //% block=&quot;scroll text UP za 1 red sa rotacijom(y/n) %r&quot;" line58="    export function sctxtup(r: string): void {" line59="        switch (r) {" line60="            case (&quot;y&quot;): r = &quot;R&quot;;" line61="            case (&quot;n&quot;): r = null;" line62="            case (&quot;Y&quot;): r = &quot;R&quot;;" line63="            case (&quot;N&quot;): r = null;" line64="            default: r = null;" line65="        }" line66="        ispis(&quot;SCU;&quot; + r);" line67="    }" line68="" line69="    //% weight=94" line70="    //% blockId=sctxtdown" line71="    //% block=&quot;scroll text DOWN za 1 red sa rotacijom(y/n) %r&quot;" line46="" line47="    //% weight=96" line48="    //% blockId=scdown" line49="    //% block=&quot;scroll bitmap DOWN za %n pixela&quot;" line50="    //% blockExternalInputs=true" line51="    export function scdown(n: number): void {" line52="        ispis(&quot;SBD;&quot; + n.toString());" line53="    }" line54="" line55="    //% weight=95" line73="        switch (r) {" line74="            case (&quot;y&quot;): r = &quot;R&quot;;" line75="            case (&quot;n&quot;): r = null;" line72="    export function sctxtdown(r: string): void {" line76="            case (&quot;Y&quot;): r = &quot;R&quot;;" line77="            case (&quot;N&quot;): r = null;" line78="            default: r = null;" line79="        }" line80="        ispis(&quot;SCD;&quot; + r);" line81="    }" line82="" line83="    //% weight=93" line84="    //% blockId=ispunaekrana" line85="    //% block=&quot;ispuna ekrana bojom %boja&quot;" line86="    export function ispunaekrana(boja: number): void {" line87="        ispis(&quot;FIL;&quot; + boja.toString());" line88="    }" line89="" line90="    //% weight=92" line91="    //% blockId=ispispix" line92="    //% block=&quot;ispis pixela na poziciju x %x y %y i boje(c/b) %boja&quot;" line93="    export function ispispix(x: number, y: number, boja: string): void {" line94="        switch (boja) {" line95="            case (&quot;c&quot;): boja = &quot;C&quot;;" line96="            case (&quot;b&quot;): boja = &quot;B&quot;;" line97="            default: boja = &quot;C&quot;;" line98="        }" line99="        ispis(&quot;PIX;&quot; + x.toString() + &quot;;&quot; + y.toString() + &quot;;&quot; + boja);" line100="    }" line101="" line102="    //% weight=91" line103="    //% blockId=brisi" line104="    //% block=&quot;brisi ekran&quot;" line105="    export function brisi(): void {" line106="        ispis(&quot;CLS&quot;);" line107="    }" line108="" line109="    //% weight=90" line110="    //% blockId=kontrast" line111="    //% block=&quot;ispis kontrasta (0-100) %oc&quot;" line112="    export function kontrast(oc: number): void {" line113="        ispis(&quot;CON;&quot; + oc.toString());" line114="    }" line115="" line116="    //% weight=89" line117="    //% blockId=isbuf" line118="    //% block=&quot;ispisi buffer ekrana na display&quot;" line119="    export function isbuf(): void {" line120="        ispis(&quot;DIS&quot;);" line121="    }" line122="" line123="    //% weight=88" line124="    //% blockId=ispistxtpix" line125="    //% block=&quot;ispis texta %tekst na poziciju x %x y %y i boje(c/b) %boja&quot;" line126="    export function ispistxtpix(tekst: string, x: number, y: number): void {" line127="        ispis(tekst + &quot;;&quot; + x.toString() + &quot;;&quot; + y.toString() + &quot;;G&quot;);" line128="    }" line129="" line130="    //% weight=87" line131="    //% blockId=ispistxt" line132="    //% block=&quot;ispis texta %tekst na stupac x %x i red y %y  boje(c/b) %boja&quot;" line133="    export function ispistxt(tekst: string, x: number, y: number, boja: string): void {" line134="        switch (boja) {" line135="            case (&quot;c&quot;): boja = &quot;C&quot;;" line136="            case (&quot;b&quot;): boja = &quot;B&quot;;" line137="            default: boja = &quot;C&quot;;" line138="        }" line139="        ispis(tekst + &quot;;&quot; + x.toString() + &quot;;&quot; + y.toString() + &quot;;0;&quot; + boja);" line140="    }" line141="" line142="    //% weight=86" line143="    //% blockId=bristxtpoz" line144="    //% block=&quot;brisanje texta od %tekst slova na stupac x %x i red y %y&quot;" line145="    export function bristxtpoz(tekst: string, x: number, y: number, boja: string): void {" line146="        let ispuna = [];" line147="        for (let i = 0; i &lt; tekst.length; i++) {" line148="            ispuna.push(&quot; &quot;);" line149="        }" line150="        let celo = ispuna.join(&quot;&quot;);" line151="        ispis(celo + &quot;;&quot; + x.toString() + &quot;;&quot; + y.toString() + &quot;;0;&quot;);" line152="    }" line153="" line154="" line155="    //% weight=85" line156="    //% blockId=bitscrolltxt" line157="    //% block=&quot;bit scroll strane(L/D) %str od reda %x do reda %y sa rotacijom ili bez(y/n) %r&quot;" line158="    export function bitscrolltxt(str: string, x: number, y: number, r: string): void {" line159="        switch (str) {" line160="            case (&quot;l&quot;): str = &quot;L&quot;;" line161="            case (&quot;d&quot;): str = &quot;D&quot;;" line162="            default: str = &quot;D&quot;;" line163="        }" line164="" line165="        switch (r) {" line166="            case (&quot;y&quot;): r = &quot;R&quot;;" line167="            case (&quot;n&quot;): r = null;" line168="            case (&quot;Y&quot;): r = &quot;R&quot;;" line169="            case (&quot;N&quot;): r = null;" line170="            default: r = null;" line171="        }" line172="" line173="        ispis(&quot;SCC;&quot; + str + &quot;;&quot; + x.toString() + &quot;;&quot; + y.toString() + &quot;;&quot; + r);" line174="    }" line175="" line176="" line177="    //% weight=84" line178="    //% blockId=lin" line179="    //% block=&quot;iscrtavanje linije od x1 %x1 y1 %y1 do x2 %x2 y2 %y2 sa bojom(C/B) %boja&quot;" line180="    export function lin(x1: number, y1: number, x2: number, y2: number, boja: string): void {" line181="        switch (boja) {" line182="            case (&quot;c&quot;): boja = &quot;C&quot;;" line183="            case (&quot;b&quot;): boja = &quot;B&quot;;" line184="            default: boja = &quot;C&quot;;" line185="        }" line186="" line187="        ispis(&quot;LIN;&quot; + x1.toString() + &quot;;&quot; + y1.toString() + &quot;;&quot; + x2.toString() + &quot;;&quot; + y2.toString() + &quot;;&quot; + boja);" line188="    }" line189="" line190="    //% weight=83" line191="    //% blockId=kruz" line192="    //% block=&quot;iscrtavanje kruznice na x %x y %y radiusa %r sa bojom(C/B) %boja&quot;" line193="    export function kruz(x: number, y: number, r: number, boja: string): void {" line194="        switch (boja) {" line195="            case (&quot;c&quot;): boja = &quot;C&quot;;" line196="            case (&quot;b&quot;): boja = &quot;B&quot;;" line197="            default: boja = &quot;C&quot;;" line198="        }" line199="" line200="        ispis(&quot;CIR;&quot; + x.toString() + &quot;;&quot; + y.toString() + &quot;;&quot; + r.toString() + &quot;;&quot; + boja);" line201="    }" line202="" line203="    //% weight=82" line204="    //% blockId=krug" line205="    //% block=&quot;iscrtavanje kruga na x %x y %y radiusa %r punjenog bojom(C/B) %fill i boje(C/B) %boja&quot;" line206="    export function krug(x: number, y: number, r: number, fill: string, boja: string): void {" line207="        switch (fill) {" line208="            case (&quot;c&quot;): fill = &quot;C&quot;;" line209="            case (&quot;b&quot;): fill = &quot;B&quot;;" line210="            default: fill = &quot;C&quot;;" line211="        }" line212="" line213="        switch (boja) {" line214="            case (&quot;c&quot;): boja = &quot;C&quot;;" line215="            case (&quot;b&quot;): boja = &quot;B&quot;;" line216="            default: boja = &quot;C&quot;;" line217="        }" line218="" line219="        ispis(&quot;CIR;&quot; + x.toString() + &quot;;&quot; + y.toString() + &quot;;&quot; + r.toString() + &quot;;&quot; + fill + &quot;;&quot; + boja);" line220="    }" line221="" line222="    //% weight=81" line223="    //% blockId=kvad" line224="    //% block=&quot;iscrtavanje kvadrata od x1 %x1 y1 %y1 do x2 %x2 y2 %y2 sa bojom(C/B) %boja&quot;" line225="    export function kvad(x1: number, y1: number, x2: number, y2: number, boja: string): void {" line226="        switch (boja) {" line227="            case (&quot;c&quot;): boja = &quot;C&quot;;" line228="            case (&quot;b&quot;): boja = &quot;B&quot;;" line229="            default: boja = &quot;C&quot;;" line230="        }" line231="" line232="        ispis(&quot;REC;&quot; + x1.toString() + &quot;;&quot; + y1.toString() + &quot;;&quot; + x2.toString() + &quot;;&quot; + y2.toString() + &quot;;&quot; + boja);" line233="    }" line234="" line235="    //% weight=81" line236="    //% blockId=tro" line237="    //% block=&quot;iscrtavanje trokuta od x1 %x1 y1 %y1 do x2 %x2 y2 %y2 do x3 %x3 y3 %y3 sa bojom(C/B) %boja&quot;" line238="    export function tro(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, boja: string): void {" line239="        switch (boja) {" line240="            case (&quot;c&quot;): boja = &quot;C&quot;;" line241="            case (&quot;b&quot;): boja = &quot;B&quot;;" line242="            default: boja = &quot;C&quot;;" line243="        }" line244="" line245="        ispis(&quot;TRI;&quot; + x1.toString() + &quot;;&quot; + y1.toString() + &quot;;&quot; + x2.toString() + &quot;;&quot; + y2.toString() + &quot;;&quot; + x3.toString() + &quot;;&quot; + y3.toString() + &quot;;&quot; + boja);" line246="    }" line247="" line248="    //% weight=80" line249="    //% blockId=troisp" line250="    //% block=&quot;iscrtavanje trokuta od x1 %x1 y1 %y1 do x2 %x2 y2 %y2 do x3 %x3 y3 %y3 sa ispunom(C/B) %fill i bojom(C/B) %boja&quot;" line251="    export function troisp(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, fill: string, boja: string): void {" line252="        switch (boja) {" line253="            case (&quot;c&quot;): boja = &quot;C&quot;;" line254="            case (&quot;b&quot;): boja = &quot;B&quot;;" line255="            default: boja = &quot;C&quot;;" line256="        }" line257="" line258="        switch (fill) {" line259="            case (&quot;c&quot;): fill = &quot;C&quot;;" line260="            case (&quot;b&quot;): fill = &quot;B&quot;;" line261="            default: fill = &quot;C&quot;;" line262="        }" line263="" line264="        ispis(&quot;TRI;&quot; + x1.toString() + &quot;;&quot; + y1.toString() + &quot;;&quot; + x2.toString() + &quot;;&quot; + y2.toString() + &quot;;&quot; + x3.toString() + &quot;;&quot; + y3.toString() + &quot;;&quot; + fill + &quot;;&quot; + boja);" line265="    }" line266="}"></mutation>
                    <field name="LINE0">namespace Display {</field>
                    <field name="LINE1"></field>
                    <field name="LINE2"></field>
                    <field name="LINE3">    //% weight=100</field>
                    <field name="LINE4">    //% blockId=bit16</field>
                    <field name="LINE5">    //% block="iscrtaj bitmapu 16x16 broja %n na poziciji  x %x i  y %y| i boje(c/b) %boja"</field>
                    <field name="LINE6">    //% blockExternalInputs=true</field>
                    <field name="LINE7">    export function bit16(n: number, x: number, y: number, boja: string): void {</field>
                    <field name="LINE8">        switch (boja) {</field>
                    <field name="LINE9">            case ("c"): boja = "C";</field>
                    <field name="LINE10">            case ("b"): boja = "B";</field>
                    <field name="LINE11">            default: boja = "C";</field>
                    <field name="LINE12">        }</field>
                    <field name="LINE13">        ispis("B16;" + n.toString() + ";" + x.toString() + ";" + y.toString() + ";" + boja);</field>
                    <field name="LINE14">    }</field>
                    <field name="LINE15"></field>
                    <field name="LINE16">    </field>
                    <field name="LINE17">        //% weight=99</field>
                    <field name="LINE18">        //% blockId=bit8x8</field>
                    <field name="LINE19">        //% block="definiraj bitmapu 8x8 brojem(0-9) %n i sedam boja(0-255) %boja1, %boja2, %boja3 %boja4 %boja5 %boja6 %boja7 %boja8"</field>
                    <field name="LINE20">        //% blockExternalInputs=true</field>
                    <field name="LINE21">        export function bit8x8(n: number, boja1: number, boja2: number, boja3: number, boja4: number, boja5: number, boja6: number, boja7: number, boja8: number): void {</field>
                    <field name="LINE22">            ispis("BIT;" + n.toString() + ";" + boja1.toString() + ";" + boja2.toString() + ";" + boja3.toString() + ";" + boja4.toString() + ";" + boja5.toString() + ";" + boja6.toString() + ";" + boja7.toString() + ";" + boja8.toString());</field>
                    <field name="LINE23">         /*   let zbroj = [128,64,32,16,8,4,2,1] */</field>
                    <field name="LINE24">        }</field>
                    <field name="LINE25"></field>
                    <field name="LINE26">    //% weight=98</field>
                    <field name="LINE27">    //% blockId=isbit8x8</field>
                    <field name="LINE28">    //% block="ispisi definiranu bitmapu 8x8 (0-9) %n na poziciji  x %x i  y %y| i boje(c/b) %boja"</field>
                    <field name="LINE29">    //% blockExternalInputs=true</field>
                    <field name="LINE30">    export function isbit8x8(n: number, x: number, y: number, boja: string): void {</field>
                    <field name="LINE31">        switch (boja) {</field>
                    <field name="LINE32">            case ("c"): boja = "C";</field>
                    <field name="LINE33">            case ("b"): boja = "B";</field>
                    <field name="LINE34">            default: boja = "C";</field>
                    <field name="LINE35">        }</field>
                    <field name="LINE36">        ispis("SPR;" + n.toString() + ";" + x.toString() + ";" + y.toString() + ";" + boja);</field>
                    <field name="LINE37">    }</field>
                    <field name="LINE38"></field>
                    <field name="LINE39">    //% weight=97</field>
                    <field name="LINE40">    //% blockId=scup</field>
                    <field name="LINE41">    //% block="scroll bitmap UP za %n pixela"</field>
                    <field name="LINE42">    //% blockExternalInputs=true</field>
                    <field name="LINE43">    export function scup(n: number): void {</field>
                    <field name="LINE44">        ispis("SBU;" + n.toString());</field>
                    <field name="LINE45">    }</field>
                    <field name="LINE46"></field>
                    <field name="LINE47">    //% weight=96</field>
                    <field name="LINE48">    //% blockId=scdown</field>
                    <field name="LINE49">    //% block="scroll bitmap DOWN za %n pixela"</field>
                    <field name="LINE50">    //% blockExternalInputs=true</field>
                    <field name="LINE51">    export function scdown(n: number): void {</field>
                    <field name="LINE52">        ispis("SBD;" + n.toString());</field>
                    <field name="LINE53">    }</field>
                    <field name="LINE54"></field>
                    <field name="LINE55">    //% weight=95</field>
                    <field name="LINE56">    //% blockId=sctxtup</field>
                    <field name="LINE57">    //% block="scroll text UP za 1 red sa rotacijom(y/n) %r"</field>
                    <field name="LINE58">    export function sctxtup(r: string): void {</field>
                    <field name="LINE59">        switch (r) {</field>
                    <field name="LINE60">            case ("y"): r = "R";</field>
                    <field name="LINE61">            case ("n"): r = null;</field>
                    <field name="LINE62">            case ("Y"): r = "R";</field>
                    <field name="LINE63">            case ("N"): r = null;</field>
                    <field name="LINE64">            default: r = null;</field>
                    <field name="LINE65">        }</field>
                    <field name="LINE66">        ispis("SCU;" + r);</field>
                    <field name="LINE67">    }</field>
                    <field name="LINE68"></field>
                    <field name="LINE69">    //% weight=94</field>
                    <field name="LINE70">    //% blockId=sctxtdown</field>
                    <field name="LINE71">    //% block="scroll text DOWN za 1 red sa rotacijom(y/n) %r"</field>
                    <field name="LINE72">    export function sctxtdown(r: string): void {</field>
                    <field name="LINE73">        switch (r) {</field>
                    <field name="LINE74">            case ("y"): r = "R";</field>
                    <field name="LINE75">            case ("n"): r = null;</field>
                    <field name="LINE76">            case ("Y"): r = "R";</field>
                    <field name="LINE77">            case ("N"): r = null;</field>
                    <field name="LINE78">            default: r = null;</field>
                    <field name="LINE79">        }</field>
                    <field name="LINE80">        ispis("SCD;" + r);</field>
                    <field name="LINE81">    }</field>
                    <field name="LINE82"></field>
                    <field name="LINE83">    //% weight=93</field>
                    <field name="LINE84">    //% blockId=ispunaekrana</field>
                    <field name="LINE85">    //% block="ispuna ekrana bojom %boja"</field>
                    <field name="LINE86">    export function ispunaekrana(boja: number): void {</field>
                    <field name="LINE87">        ispis("FIL;" + boja.toString());</field>
                    <field name="LINE88">    }</field>
                    <field name="LINE89"></field>
                    <field name="LINE90">    //% weight=92</field>
                    <field name="LINE91">    //% blockId=ispispix</field>
                    <field name="LINE92">    //% block="ispis pixela na poziciju x %x y %y i boje(c/b) %boja"</field>
                    <field name="LINE93">    export function ispispix(x: number, y: number, boja: string): void {</field>
                    <field name="LINE94">        switch (boja) {</field>
                    <field name="LINE95">            case ("c"): boja = "C";</field>
                    <field name="LINE96">            case ("b"): boja = "B";</field>
                    <field name="LINE97">            default: boja = "C";</field>
                    <field name="LINE98">        }</field>
                    <field name="LINE99">        ispis("PIX;" + x.toString() + ";" + y.toString() + ";" + boja);</field>
                    <field name="LINE100">    }</field>
                    <field name="LINE101"></field>
                    <field name="LINE102">    //% weight=91</field>
                    <field name="LINE103">    //% blockId=brisi</field>
                    <field name="LINE104">    //% block="brisi ekran"</field>
                    <field name="LINE105">    export function brisi(): void {</field>
                    <field name="LINE106">        ispis("CLS");</field>
                    <field name="LINE107">    }</field>
                    <field name="LINE108"></field>
                    <field name="LINE109">    //% weight=90</field>
                    <field name="LINE110">    //% blockId=kontrast</field>
                    <field name="LINE111">    //% block="ispis kontrasta (0-100) %oc"</field>
                    <field name="LINE112">    export function kontrast(oc: number): void {</field>
                    <field name="LINE113">        ispis("CON;" + oc.toString());</field>
                    <field name="LINE114">    }</field>
                    <field name="LINE115"></field>
                    <field name="LINE116">    //% weight=89</field>
                    <field name="LINE117">    //% blockId=isbuf</field>
                    <field name="LINE118">    //% block="ispisi buffer ekrana na display"</field>
                    <field name="LINE119">    export function isbuf(): void {</field>
                    <field name="LINE120">        ispis("DIS");</field>
                    <field name="LINE121">    }</field>
                    <field name="LINE122"></field>
                    <field name="LINE123">    //% weight=88</field>
                    <field name="LINE124">    //% blockId=ispistxtpix</field>
                    <field name="LINE125">    //% block="ispis texta %tekst na poziciju x %x y %y i boje(c/b) %boja"</field>
                    <field name="LINE126">    export function ispistxtpix(tekst: string, x: number, y: number): void {</field>
                    <field name="LINE127">        ispis(tekst + ";" + x.toString() + ";" + y.toString() + ";G");</field>
                    <field name="LINE128">    }</field>
                    <field name="LINE129"></field>
                    <field name="LINE130">    //% weight=87</field>
                    <field name="LINE131">    //% blockId=ispistxt</field>
                    <field name="LINE132">    //% block="ispis texta %tekst na stupac x %x i red y %y  boje(c/b) %boja"</field>
                    <field name="LINE133">    export function ispistxt(tekst: string, x: number, y: number, boja: string): void {</field>
                    <field name="LINE134">        switch (boja) {</field>
                    <field name="LINE135">            case ("c"): boja = "C";</field>
                    <field name="LINE136">            case ("b"): boja = "B";</field>
                    <field name="LINE137">            default: boja = "C";</field>
                    <field name="LINE138">        }</field>
                    <field name="LINE139">        ispis(tekst + ";" + x.toString() + ";" + y.toString() + ";0;" + boja);</field>
                    <field name="LINE140">    }</field>
                    <field name="LINE141"></field>
                    <field name="LINE142">    //% weight=86</field>
                    <field name="LINE143">    //% blockId=bristxtpoz</field>
                    <field name="LINE144">    //% block="brisanje texta od %tekst slova na stupac x %x i red y %y"</field>
                    <field name="LINE145">    export function bristxtpoz(tekst: string, x: number, y: number, boja: string): void {</field>
                    <field name="LINE146">        let ispuna = [];</field>
                    <field name="LINE147">        for (let i = 0; i &lt; tekst.length; i++) {</field>
                    <field name="LINE148">            ispuna.push(" ");</field>
                    <field name="LINE149">        }</field>
                    <field name="LINE150">        let celo = ispuna.join("");</field>
                    <field name="LINE151">        ispis(celo + ";" + x.toString() + ";" + y.toString() + ";0;");</field>
                    <field name="LINE152">    }</field>
                    <field name="LINE153"></field>
                    <field name="LINE154"></field>
                    <field name="LINE155">    //% weight=85</field>
                    <field name="LINE156">    //% blockId=bitscrolltxt</field>
                    <field name="LINE157">    //% block="bit scroll strane(L/D) %str od reda %x do reda %y sa rotacijom ili bez(y/n) %r"</field>
                    <field name="LINE158">    export function bitscrolltxt(str: string, x: number, y: number, r: string): void {</field>
                    <field name="LINE159">        switch (str) {</field>
                    <field name="LINE160">            case ("l"): str = "L";</field>
                    <field name="LINE161">            case ("d"): str = "D";</field>
                    <field name="LINE162">            default: str = "D";</field>
                    <field name="LINE163">        }</field>
                    <field name="LINE164"></field>
                    <field name="LINE165">        switch (r) {</field>
                    <field name="LINE166">            case ("y"): r = "R";</field>
                    <field name="LINE167">            case ("n"): r = null;</field>
                    <field name="LINE168">            case ("Y"): r = "R";</field>
                    <field name="LINE169">            case ("N"): r = null;</field>
                    <field name="LINE170">            default: r = null;</field>
                    <field name="LINE171">        }</field>
                    <field name="LINE172"></field>
                    <field name="LINE173">        ispis("SCC;" + str + ";" + x.toString() + ";" + y.toString() + ";" + r);</field>
                    <field name="LINE174">    }</field>
                    <field name="LINE175"></field>
                    <field name="LINE176"></field>
                    <field name="LINE177">    //% weight=84</field>
                    <field name="LINE178">    //% blockId=lin</field>
                    <field name="LINE179">    //% block="iscrtavanje linije od x1 %x1 y1 %y1 do x2 %x2 y2 %y2 sa bojom(C/B) %boja"</field>
                    <field name="LINE180">    export function lin(x1: number, y1: number, x2: number, y2: number, boja: string): void {</field>
                    <field name="LINE181">        switch (boja) {</field>
                    <field name="LINE182">            case ("c"): boja = "C";</field>
                    <field name="LINE183">            case ("b"): boja = "B";</field>
                    <field name="LINE184">            default: boja = "C";</field>
                    <field name="LINE185">        }</field>
                    <field name="LINE186"></field>
                    <field name="LINE187">        ispis("LIN;" + x1.toString() + ";" + y1.toString() + ";" + x2.toString() + ";" + y2.toString() + ";" + boja);</field>
                    <field name="LINE188">    }</field>
                    <field name="LINE189"></field>
                    <field name="LINE190">    //% weight=83</field>
                    <field name="LINE191">    //% blockId=kruz</field>
                    <field name="LINE192">    //% block="iscrtavanje kruznice na x %x y %y radiusa %r sa bojom(C/B) %boja"</field>
                    <field name="LINE193">    export function kruz(x: number, y: number, r: number, boja: string): void {</field>
                    <field name="LINE194">        switch (boja) {</field>
                    <field name="LINE195">            case ("c"): boja = "C";</field>
                    <field name="LINE196">            case ("b"): boja = "B";</field>
                    <field name="LINE197">            default: boja = "C";</field>
                    <field name="LINE198">        }</field>
                    <field name="LINE199"></field>
                    <field name="LINE200">        ispis("CIR;" + x.toString() + ";" + y.toString() + ";" + r.toString() + ";" + boja);</field>
                    <field name="LINE201">    }</field>
                    <field name="LINE202"></field>
                    <field name="LINE203">    //% weight=82</field>
                    <field name="LINE204">    //% blockId=krug</field>
                    <field name="LINE205">    //% block="iscrtavanje kruga na x %x y %y radiusa %r punjenog bojom(C/B) %fill i boje(C/B) %boja"</field>
                    <field name="LINE206">    export function krug(x: number, y: number, r: number, fill: string, boja: string): void {</field>
                    <field name="LINE207">        switch (fill) {</field>
                    <field name="LINE208">            case ("c"): fill = "C";</field>
                    <field name="LINE209">            case ("b"): fill = "B";</field>
                    <field name="LINE210">            default: fill = "C";</field>
                    <field name="LINE211">        }</field>
                    <field name="LINE212"></field>
                    <field name="LINE213">        switch (boja) {</field>
                    <field name="LINE214">            case ("c"): boja = "C";</field>
                    <field name="LINE215">            case ("b"): boja = "B";</field>
                    <field name="LINE216">            default: boja = "C";</field>
                    <field name="LINE217">        }</field>
                    <field name="LINE218"></field>
                    <field name="LINE219">        ispis("CIR;" + x.toString() + ";" + y.toString() + ";" + r.toString() + ";" + fill + ";" + boja);</field>
                    <field name="LINE220">    }</field>
                    <field name="LINE221"></field>
                    <field name="LINE222">    //% weight=81</field>
                    <field name="LINE223">    //% blockId=kvad</field>
                    <field name="LINE224">    //% block="iscrtavanje kvadrata od x1 %x1 y1 %y1 do x2 %x2 y2 %y2 sa bojom(C/B) %boja"</field>
                    <field name="LINE225">    export function kvad(x1: number, y1: number, x2: number, y2: number, boja: string): void {</field>
                    <field name="LINE226">        switch (boja) {</field>
                    <field name="LINE227">            case ("c"): boja = "C";</field>
                    <field name="LINE228">            case ("b"): boja = "B";</field>
                    <field name="LINE229">            default: boja = "C";</field>
                    <field name="LINE230">        }</field>
                    <field name="LINE231"></field>
                    <field name="LINE232">        ispis("REC;" + x1.toString() + ";" + y1.toString() + ";" + x2.toString() + ";" + y2.toString() + ";" + boja);</field>
                    <field name="LINE233">    }</field>
                    <field name="LINE234"></field>
                    <field name="LINE235">    //% weight=81</field>
                    <field name="LINE236">    //% blockId=tro</field>
                    <field name="LINE237">    //% block="iscrtavanje trokuta od x1 %x1 y1 %y1 do x2 %x2 y2 %y2 do x3 %x3 y3 %y3 sa bojom(C/B) %boja"</field>
                    <field name="LINE238">    export function tro(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, boja: string): void {</field>
                    <field name="LINE239">        switch (boja) {</field>
                    <field name="LINE240">            case ("c"): boja = "C";</field>
                    <field name="LINE241">            case ("b"): boja = "B";</field>
                    <field name="LINE242">            default: boja = "C";</field>
                    <field name="LINE243">        }</field>
                    <field name="LINE244"></field>
                    <field name="LINE245">        ispis("TRI;" + x1.toString() + ";" + y1.toString() + ";" + x2.toString() + ";" + y2.toString() + ";" + x3.toString() + ";" + y3.toString() + ";" + boja);</field>
                    <field name="LINE246">    }</field>
                    <field name="LINE247"></field>
                    <field name="LINE248">    //% weight=80</field>
                    <field name="LINE249">    //% blockId=troisp</field>
                    <field name="LINE250">    //% block="iscrtavanje trokuta od x1 %x1 y1 %y1 do x2 %x2 y2 %y2 do x3 %x3 y3 %y3 sa ispunom(C/B) %fill i bojom(C/B) %boja"</field>
                    <field name="LINE251">    export function troisp(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, fill: string, boja: string): void {</field>
                    <field name="LINE252">        switch (boja) {</field>
                    <field name="LINE253">            case ("c"): boja = "C";</field>
                    <field name="LINE254">            case ("b"): boja = "B";</field>
                    <field name="LINE255">            default: boja = "C";</field>
                    <field name="LINE256">        }</field>
                    <field name="LINE257"></field>
                    <field name="LINE258">        switch (fill) {</field>
                    <field name="LINE259">            case ("c"): fill = "C";</field>
                    <field name="LINE260">            case ("b"): fill = "B";</field>
                    <field name="LINE261">            default: fill = "C";</field>
                    <field name="LINE262">        }</field>
                    <field name="LINE263"></field>
                    <field name="LINE264">        ispis("TRI;" + x1.toString() + ";" + y1.toString() + ";" + x2.toString() + ";" + y2.toString() + ";" + x3.toString() + ";" + y3.toString() + ";" + fill + ";" + boja);</field>
                    <field name="LINE265">    }</field>
                    <field name="LINE266">}</field>
                  </block>
                </next>
              </block>
            </next>
          </block>
        </next>
      </block>
    </statement>
  </block>
  <block type="device_button_event" y="20" x="2218">
    <field name="NAME">Button.A</field>
  </block>
  <block type="function_definition" y="36" x="2486">
    <mutation name="ispis" functionid="dNCD{k7:g9LU$xj8XF`7">
      <arg id="s41ubkrvqkfxx1v6ku0vt" type="string" name="tekst"></arg>
    </mutation>
    <field name="function_title">function</field>
    <field name="function_name">ispis</field>
    <value name="s41ubkrvqkfxx1v6ku0vt">
      <shadow type="argument_reporter_string">
        <field name="VALUE">tekst</field>
      </shadow>
    </value>
    <statement name="STACK">
      <block type="variables_set">
        <field id="r4*~sq4(.d+VmN2S2{?*" name="VAR" variabletype="">dd</field>
        <value name="VALUE">
          <shadow type="math_number">
            <field name="NUM">0</field>
          </shadow>
          <block type="text_length">
            <value name="VALUE">
              <block type="argument_reporter_string">
                <field name="VALUE">tekst</field>
              </block>
            </value>
          </block>
        </value>
        <next>
          <block type="controls_if">
            <mutation else="1"></mutation>
            <value name="IF0">
              <shadow type="logic_boolean">
                <field name="BOOL">TRUE</field>
              </shadow>
              <block type="logic_compare">
                <field name="OP">LT</field>
                <value name="A">
                  <shadow type="math_number">
                    <field name="NUM">0</field>
                  </shadow>
                  <block type="variables_get">
                    <field id="r4*~sq4(.d+VmN2S2{?*" name="VAR" variabletype="">dd</field>
                  </block>
                </value>
                <value name="B">
                  <shadow type="math_number">
                    <field name="NUM">31</field>
                  </shadow>
                </value>
              </block>
            </value>
            <statement name="DO0">
              <block type="function_call">
                <mutation name="salji" functionid="en=m=Dk!Kcbbm;nK}spw">
                  <arg id="qdgqayrth37kyqs1ya2i" type="string" name="tekst"></arg>
                </mutation>
                <field name="function_title">call</field>
                <field name="function_name">salji</field>
                <value name="qdgqayrth37kyqs1ya2i">
                  <shadow id="._ET7?xQ)8F=7#d7hBOj" type="text">
                    <field name="TEXT">abc</field>
                  </shadow>
                  <block type="argument_reporter_string">
                    <field name="VALUE">tekst</field>
                  </block>
                </value>
              </block>
            </statement>
            <statement name="ELSE">
              <block type="function_call">
                <mutation name="salji" functionid="en=m=Dk!Kcbbm;nK}spw">
                  <arg id="qdgqayrth37kyqs1ya2i" type="string" name="tekst"></arg>
                </mutation>
                <field name="function_title">call</field>
                <field name="function_name">salji</field>
                <value name="qdgqayrth37kyqs1ya2i">
                  <shadow id="~B7X8eB$`$H#_icci%[a" type="text">
                    <field name="TEXT">abc</field>
                  </shadow>
                  <block type="text_join">
                    <mutation items="3"></mutation>
                    <value name="ADD0">
                      <shadow type="text">
                        <field name="TEXT"></field>
                      </shadow>
                    </value>
                    <value name="ADD1">
                      <shadow type="text">
                        <field name="TEXT"></field>
                      </shadow>
                      <block type="string_substr">
                        <value name="this">
                          <shadow type="text">
                            <field name="TEXT"></field>
                          </shadow>
                          <block type="argument_reporter_string">
                            <field name="VALUE">tekst</field>
                          </block>
                        </value>
                        <value name="start">
                          <shadow type="math_number">
                            <field name="NUM">0</field>
                          </shadow>
                        </value>
                        <value name="length">
                          <shadow type="math_number">
                            <field name="NUM">30</field>
                          </shadow>
                        </value>
                      </block>
                    </value>
                    <value name="ADD2">
                      <shadow type="text">
                        <field name="TEXT">+</field>
                      </shadow>
                    </value>
                  </block>
                </value>
                <next>
                  <block type="function_call">
                    <mutation name="salji" functionid="en=m=Dk!Kcbbm;nK}spw">
                      <arg id="qdgqayrth37kyqs1ya2i" type="string" name="tekst"></arg>
                    </mutation>
                    <field name="function_title">call</field>
                    <field name="function_name">salji</field>
                    <value name="qdgqayrth37kyqs1ya2i">
                      <shadow id="b@Nqmp5)a$1fZji(.mH9" type="text">
                        <field name="TEXT">abc</field>
                      </shadow>
                      <block type="string_substr">
                        <value name="this">
                          <shadow type="text">
                            <field name="TEXT"></field>
                          </shadow>
                          <block type="argument_reporter_string">
                            <field name="VALUE">tekst</field>
                          </block>
                        </value>
                        <value name="start">
                          <shadow type="math_number">
                            <field name="NUM">30</field>
                          </shadow>
                        </value>
                        <value name="length">
                          <block type="variables_get">
                            <field id="r4*~sq4(.d+VmN2S2{?*" name="VAR" variabletype="">dd</field>
                          </block>
                        </value>
                      </block>
                    </value>
                  </block>
                </next>
              </block>
            </statement>
          </block>
        </next>
      </block>
    </statement>
  </block>
  <block type="function_definition" y="36" x="3347">
    <mutation name="salji" functionid="en=m=Dk!Kcbbm;nK}spw">
      <arg id="qdgqayrth37kyqs1ya2i" type="string" name="tekst"></arg>
    </mutation>
    <field name="function_title">function</field>
    <field name="function_name">salji</field>
    <value name="qdgqayrth37kyqs1ya2i">
      <shadow type="argument_reporter_string">
        <field name="VALUE">tekst</field>
      </shadow>
    </value>
    <statement name="STACK">
      <block type="variables_set">
        <field id="hW]tG.{ko8$9`bJ1d$~_" name="VAR" variabletype="">duz</field>
        <value name="VALUE">
          <shadow type="math_number">
            <field name="NUM">0</field>
          </shadow>
          <block type="text_length">
            <value name="VALUE">
              <block type="argument_reporter_string">
                <field name="VALUE">tekst</field>
              </block>
            </value>
          </block>
        </value>
        <next>
          <block type="typescript_statement" editable="false">
            <mutation declaredvars="buf" numlines="1" line0="let buf = pins.createBuffer(duz);"></mutation>
            <field name="LINE0">let buf = pins.createBuffer(duz);</field>
            <next>
              <block type="pxt_controls_for">
                <value name="VAR">
                  <shadow type="variables_get_reporter">
                    <field id=",|3#3XZaj,cMzss/il,x" name="VAR" variabletype="">n</field>
                  </shadow>
                </value>
                <value name="TO">
                  <shadow type="math_whole_number">
                    <field name="NUM">0</field>
                  </shadow>
                  <block type="math_arithmetic">
                    <field name="OP">MINUS</field>
                    <value name="A">
                      <shadow type="math_number">
                        <field name="NUM">0</field>
                      </shadow>
                      <block type="variables_get">
                        <field id="hW]tG.{ko8$9`bJ1d$~_" name="VAR" variabletype="">duz</field>
                      </block>
                    </value>
                    <value name="B">
                      <shadow type="math_number">
                        <field name="NUM">1</field>
                      </shadow>
                    </value>
                  </block>
                </value>
                <statement name="DO">
                  <block type="typescript_statement" editable="false">
                    <mutation declaredvars="bb" numlines="1" line0="let bb = tekst.charCodeAt(n);"></mutation>
                    <field name="LINE0">let bb = tekst.charCodeAt(n);</field>
                    <next>
                      <block type="typescript_statement" editable="false">
                        <mutation numlines="1" line0="buf.setNumber(NumberFormat.UInt8LE, n, bb);"></mutation>
                        <field name="LINE0">buf.setNumber(NumberFormat.UInt8LE, n, bb);</field>
                      </block>
                    </next>
                  </block>
                </statement>
                <next>
                  <block type="typescript_statement" editable="false">
                    <mutation numlines="1" line0="pins.i2cWriteBuffer(0x99, buf, false);"></mutation>
                    <field name="LINE0">pins.i2cWriteBuffer(0x99, buf, false);</field>
                    <next>
                      <block type="device_pause">
                        <value name="pause">
                          <shadow type="timePicker">
                            <field name="ms">30</field>
                          </shadow>
                        </value>
                      </block>
                    </next>
                  </block>
                </next>
              </block>
            </next>
          </block>
        </next>
      </block>
    </statement>
  </block>
</xml>